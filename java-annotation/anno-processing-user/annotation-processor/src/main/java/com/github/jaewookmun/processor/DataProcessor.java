package com.github.jaewookmun.processor;

import com.github.jaewookmun.annotation.CustomData;
import com.google.auto.service.AutoService;
import com.squareup.javapoet.*;

import javax.annotation.processing.*;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.*;
import javax.lang.model.type.TypeKind;
import javax.tools.Diagnostic;
import java.io.IOException;
import java.util.List;
import java.util.Set;

@SupportedAnnotationTypes("com.github.jaewookmun.annotation.CustomData")
@SupportedSourceVersion(SourceVersion.RELEASE_21)
@AutoService(Processor.class)
public class DataProcessor extends AbstractProcessor {
    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        for (Element element : roundEnv.getElementsAnnotatedWith(CustomData.class)) {
            TypeElement classElement = (TypeElement) element;

            try {
                generateClassWithGetterAndSetter(classElement);

            } catch (IOException e) {
                processingEnv.getMessager().printMessage(
                        Diagnostic.Kind.ERROR,
                        "Error generating class with getter and setter: " + e.getMessage(),
                        element
                );
            }
        }
        processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, "processed");

        return true;
    }

    private void generateClassWithGetterAndSetter(TypeElement classElement) throws IOException {
        String className = classElement.getSimpleName().toString();
        String packageName = processingEnv.getElementUtils()
                .getPackageOf(classElement).getQualifiedName().toString();

        TypeSpec.Builder classBuilder = TypeSpec.classBuilder(className + "Supported")
                .superclass(classElement.asType())
                .addModifiers(Modifier.PUBLIC);


        // 내부 인스턴스 필드 조회 후 getter와 setter 생성
        List<VariableElement> fieldList = classElement.getEnclosedElements().stream()
                .filter(e -> e.getKind() == ElementKind.FIELD)
                .map(e -> (VariableElement) e)
                .filter(v -> !v.getModifiers().contains(Modifier.STATIC) && !v.getModifiers().contains(Modifier.FINAL))
                .toList();

        for (VariableElement field : fieldList) {
            String fieldName = field.getSimpleName().toString();
            TypeName returnType = TypeName.get(field.asType());

            // field
            FieldSpec instanceField = FieldSpec.builder(returnType, fieldName, Modifier.PRIVATE).build();
            classBuilder.addField(instanceField);

            // method
            String methodName = isBoolean(field) ?
                    "is" + capitalize(fieldName) :
                    "get" + capitalize(fieldName);

            MethodSpec getter = MethodSpec.methodBuilder(methodName)
                    .addModifiers(Modifier.PUBLIC)
                    .returns(returnType)
                    .addStatement("return this.$L", fieldName)
                    .addJavadoc("Returns the value of $L.\n", fieldName)
                    .addJavadoc("@return the $L value\n", fieldName)
                    .build();

            classBuilder.addMethod(getter);

            methodName = "set" + capitalize(fieldName);
            MethodSpec setter = MethodSpec.methodBuilder(methodName)
                    .addModifiers(Modifier.PUBLIC)
                    .returns(TypeName.VOID)
                    .addParameter(ClassName.get(field.asType()), fieldName)
                    .addStatement("this.$L = $L", fieldName, fieldName)
                    .addJavadoc("Sets the value of $L.\n", fieldName)
                    .build();

            classBuilder.addMethod(setter);
        }

        JavaFile javaFile = JavaFile.builder(packageName, classBuilder.build())
                .addFileComment("Generated by CustomGetterProcessor")
                .indent("    ") // 4칸 들여쓰기
                .build();

        javaFile.writeTo(processingEnv.getFiler());
    }

    private boolean isBoolean(VariableElement field) {
        return field.asType().getKind() == TypeKind.BOOLEAN ||
                "java.lang.Boolean".equals(field.asType().toString());
    }

    private String capitalize(String str) {
        if (str == null || str.isEmpty()) {
            return str;
        }
        return str.substring(0, 1).toUpperCase() + str.substring(1);
    }
}
